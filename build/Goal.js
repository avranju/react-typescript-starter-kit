"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path='../typings/tsd.d.ts' />
var React = require('react');
var ReactDOM = require('react-dom');
var _ = require('lodash');
require('es6-shim');
var PropertyEditor = (function (_super) {
    __extends(PropertyEditor, _super);
    function PropertyEditor(props) {
        var _this = this;
        _super.call(this, props);
        this.handleOnDelete = function (prop) {
            _this.setState(Object.assign({}, _this.state, {
                properties: _this.state
                    .properties
                    .filter(function (p) { return p.id !== prop.id; })
            }));
        };
        this.handleOnPropChange = function (prop) {
            _this.setState(Object.assign({}, _this.state, {
                properties: _this.state.properties.map(function (p) { return p.id === prop.id ? {
                    id: prop.id,
                    key: prop.key,
                    value: prop.value
                } : p; })
            }));
        };
        this.state = {
            properties: [
                {
                    id: _.uniqueId(),
                    key: '',
                    value: ''
                }
            ]
        };
    }
    PropertyEditor.prototype.areRowsEmpty = function () {
        var _this = this;
        var indices = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            indices[_i - 0] = arguments[_i];
        }
        // return true if all the rows whose indices are given
        return indices
            .map(function (index) { return _this.state.properties[index]; })
            .every(function (prop) {
            return _.trim(prop.key).length === 0 && _.trim(prop.value).length === 0;
        });
    };
    PropertyEditor.prototype.handleOnFocus = function (prop) {
        // if this is the last row in the table then add another
        // empty row;
        var propsLength = this.state.properties.length;
        if (this.state.properties[propsLength - 1].id === prop.id) {
            this.setState(Object.assign({}, this.state, {
                properties: this.state.properties.concat([
                    {
                        id: _.uniqueId(),
                        key: '',
                        value: ''
                    }
                ])
            }));
        }
        else {
            if (propsLength > 2 &&
                prop.id !== this.state.properties[propsLength - 2].id &&
                this.areRowsEmpty(propsLength - 1, propsLength - 2)) {
                var lastRow = this.state.properties[propsLength - 1];
                this.handleOnDelete(lastRow);
            }
        }
    };
    PropertyEditor.prototype.render = function () {
        var _this = this;
        // we render delete row buttons only if we have more than 1 row
        var enableDeleteRow = this.state.properties.length > 1;
        return (React.createElement("div", {className: 'property-editor'}, React.createElement("table", null, React.createElement("tbody", null, this.state.properties.map(function (prop) {
            return (React.createElement("tr", {key: prop.id}, React.createElement("td", null, React.createElement("input", {type: 'text', placeholder: 'key', onFocus: function () { return _this.handleOnFocus(prop); }, onChange: function (e) {
                _this.handleOnPropChange({
                    id: prop.id,
                    key: e.target.value,
                    value: prop.value
                });
            }, value: prop.key})), React.createElement("td", null, React.createElement("input", {type: 'text', placeholder: 'value', onFocus: function () { return _this.handleOnFocus(prop); }, onChange: function (e) {
                _this.handleOnPropChange({
                    id: prop.id,
                    key: prop.key,
                    value: e.target.value
                });
            }, value: prop.value})), enableDeleteRow ? (React.createElement("td", {className: 'close-button', title: 'Close', onClick: function () { return _this.handleOnDelete(prop); }}, String.fromCharCode(10006))) : null));
        })))));
    };
    return PropertyEditor;
}(React.Component));
exports.__esModule = true;
exports["default"] = PropertyEditor;
ReactDOM.render(React.createElement(PropertyEditor, null), document.getElementById('react'));

//# sourceMappingURL=data:application/json;base64,
